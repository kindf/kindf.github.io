<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>kindf</title>
        <link>http://example.org/</link>
        <description>kindf</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 17 Sep 2024 02:46:12 &#43;0800</lastBuildDate>
            <atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>滚服游戏服务器框架</title>
    <link>http://example.org/posts/server/server_frame2/</link>
    <pubDate>Tue, 17 Sep 2024 02:46:12 &#43;0800</pubDate><author>
                        <name>kindf</name><uri>https://github.com/kindf</uri></author><guid>http://example.org/posts/server/server_frame2/</guid>
    <description><![CDATA[示意图 各进程及作用 gate 进程： 负责和客户端直连和消息的分发 login 进程： 负责玩家的登录验证并为玩家分配 gameworld 进程 gameworld 进程： 游戏逻辑服务器 global 进程： 与多个 gameworld 进程]]></description>
</item><item>
    <title>skynet 的 monitor 线程</title>
    <link>http://example.org/posts/skynet/skynet_moniter/</link>
    <pubDate>Tue, 10 Sep 2024 00:32:33 &#43;0800</pubDate><author>
                        <name>kindf</name><uri>https://github.com/kindf</uri></author><guid>http://example.org/posts/skynet/skynet_moniter/</guid>
    <description><![CDATA[主要数据结构struct skynet_monitor { ATOM_INT version; int check_version; uint32_t source; uint32_t destination; }; skynet 的每个工作线程对应一个 skynet_monitor 结构体 version：当前的版本号 check_version：检查版]]></description>
</item><item>
    <title>游戏邮件系统</title>
    <link>http://example.org/posts/server/mail/</link>
    <pubDate>Sun, 08 Sep 2024 12:45:16 &#43;0800</pubDate><author>
                        <name>kindf</name><uri>https://github.com/kindf</uri></author><guid>http://example.org/posts/server/mail/</guid>
    <description><![CDATA[功能需求 单人邮件：对特定玩家发送邮件（如后台补偿邮件，背包空间不足道具由邮件发送等） 多人邮件：对一批玩家发送邮件（如排行榜奖励邮件，公会奖励]]></description>
</item><item>
    <title>游戏聊天</title>
    <link>http://example.org/posts/server/chat_server/</link>
    <pubDate>Fri, 06 Sep 2024 23:41:41 &#43;0800</pubDate><author>
                        <name>kindf</name><uri>https://github.com/kindf</uri></author><guid>http://example.org/posts/server/chat_server/</guid>
    <description><![CDATA[游戏聊天实现 聊天功能基本需求 支持玩家与玩家私聊，保存私聊数据 支持多个频道聊天（如队伍频道，公会频道，世界频道，系统频道） 支持敏感词过滤 游戏聊]]></description>
</item><item>
    <title>socket 连接</title>
    <link>http://example.org/posts/network/socket_connect/</link>
    <pubDate>Wed, 04 Sep 2024 23:30:25 &#43;0800</pubDate><author>
                        <name>kindf</name><uri>https://github.com/kindf</uri></author><guid>http://example.org/posts/network/socket_connect/</guid>
    <description><![CDATA[三次握手 各个 socket 函数 connect 函数： 调用 connect 将发起第一次握手，阻塞套接字 connect 会在第二次握完成时返回成功 connect 失败的套接字不可再用，必须关闭 常见返回错误： ETI]]></description>
</item><item>
    <title>多进程 accept</title>
    <link>http://example.org/posts/network/multiprocess_accept/</link>
    <pubDate>Wed, 04 Sep 2024 20:41:05 &#43;0800</pubDate><author>
                        <name>kindf</name><uri>https://github.com/kindf</uri></author><guid>http://example.org/posts/network/multiprocess_accept/</guid>
    <description><![CDATA[多进程网络编程中子进程在 fork 后应该先做什么处理再进行 fd 读写处理pid_t pid; int listenfd, connfd; listenfd = Socket(...); Bind(listenfd, ...); Listen(listenfd, LISTENQ); for(;;) { connfd = Accept(listenfd, ...); if( (pid = Fork()) == 0) { Close(listenfd); doit(connfd); Close(connfd); exit(0); } Close(connfd); } 以上为经]]></description>
</item><item>
    <title>基于 skynet 的卡牌游戏服务器框架</title>
    <link>http://example.org/posts/server/server_frame/</link>
    <pubDate>Wed, 04 Sep 2024 15:37:04 &#43;0800</pubDate><author>
                        <name>kindf</name><uri>https://github.com/kindf</uri></author><guid>http://example.org/posts/server/server_frame/</guid>
    <description><![CDATA[框架示意图 各个进程及其作用 main 进程：游戏逻辑进程 chat 进程：聊天进程，和 main 进程一一对应 fight 进程：战斗进程，和 main 进程一一对应 record 进程：日志管理进程，和 main]]></description>
</item><item>
    <title>socket 关闭</title>
    <link>http://example.org/posts/network/socket_close/</link>
    <pubDate>Tue, 03 Sep 2024 23:39:50 &#43;0800</pubDate><author>
                        <name>kindf</name><uri>https://github.com/kindf</uri></author><guid>http://example.org/posts/network/socket_close/</guid>
    <description><![CDATA[四次挥手 客户端主动发起连接，发送 FIN 包 服务端接收到 FIN 包传递给应用程序 服务端应用程序接收到 FIN 包后关闭连接（TCP 向对端发送 FIN） 客户端接收到 FIN]]></description>
</item><item>
    <title>Lua的GC</title>
    <link>http://example.org/posts/other/lua_gc/</link>
    <pubDate>Mon, 18 Dec 2023 14:20:41 &#43;0800</pubDate><author>
                        <name>kindf</name><uri>https://github.com/kindf</uri></author><guid>http://example.org/posts/other/lua_gc/</guid>
    <description><![CDATA[主要的数据结构 gobal_State 的成员变量 GCObject **rootgc：存放待 GC 对象的链表，所有对象创建之后都会放入该链表中 GCObject *gray：存放标记为灰色的 GC 对象的链表]]></description>
</item><item>
    <title>skynet的服务</title>
    <link>http://example.org/posts/skynet/skynet_cxt/</link>
    <pubDate>Sat, 16 Dec 2023 02:31:17 &#43;0800</pubDate><author>
                        <name>kindf</name><uri>https://github.com/kindf</uri></author><guid>http://example.org/posts/skynet/skynet_cxt/</guid>
    <description><![CDATA[简述 skynet 可以根据动态库（具有一定的规范）动态的创建出服务 skynet启用多线程处理服务处理消息 服务并不会主动执行逻辑，只有当服务接受到消息时才]]></description>
</item></channel>
</rss>
